import java.util.HashMap;
import java.util.List;
import java.util.Queue;

/*
 * @lc app=leetcode id=928 lang=java
 *
 * [928] Minimize Malware Spread II
 */

// @lc code=start
class Solution {
    // time = O(n^2), space = O(n)
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        HashMap<Integer, List<Integer>> sources = new HashMap<>();
        HashSet<Integer> initials = new HashSet<>();
        for (int x : initial) initials.add(x);

        HashMap<Integer, List<Integer>> nextNodes = new HashMap<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i != j && graph[i][j] == 1) {
                    nextNodes.putIfAbsent(i, new ArrayList<>());
                    nextNodes.putIfAbsent(j, new ArrayList<>());
                    nextNodes.get(i).add(j);
                    nextNodes.get(j).add(i);
                }
            }
        }

        for (int start : initial) {
            Queue<int[]> queue = new LinkedList<>();
            queue.offer(new int[]{start, start});
            HashSet<Integer> visited = new HashSet<>();
            visited.add(start);

            while (!queue.isEmpty()) {
                int[] cur = queue.poll();
                int node = cur[0], source = cur[1];

                for (int next : nextNodes.getOrDefault(node, new ArrayList<>())) {
                    if (visited.contains(next)) continue;
                    if (initials.contains(next)) continue;
                    sources.putIfAbsent(next, new ArrayList<>());
                    sources.get(next).add(source);
                    queue.offer(new int[]{next, source});
                    visited.add(next);
                }
            }
        }

        HashMap<Integer, Integer> count = new HashMap<>();
        for (int x : sources.keySet()) {
            if (sources.get(x).size() == 1) {
                int s = sources.get(x).get(0);
                count.put(s, count.getOrDefault(s, 0) + 1);
            }
        }

        int size = 0, res = -1;
        for (int x : count.keySet()) {
            if (count.get(x) > size) {
                res = x;
                size = count.get(x);
            } else if (count.get(x) == size && x < res) res = x;
        }

        if (res == -1) {
            Arrays.sort(initial);
            return initial[0];
        }
        return res;
    }
}
// @lc code=end

